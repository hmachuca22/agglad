# Generated by Django 2.1.1 on 2019-03-03 03:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        ('core', '0002_auto_20190302_2117'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='Nombres')),
                ('last_name', models.CharField(max_length=150, verbose_name='Apellidos')),
                ('full_name', models.CharField(max_length=300, null=True, verbose_name='Nombre completo')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Correo electrónico')),
                ('alternative_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Correo electrónico alternativo')),
                ('phone_number', models.CharField(max_length=15, verbose_name='Número de teléfono')),
                ('alternative_phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Número de teléfono alternativo')),
                ('gender', models.CharField(choices=[('male', 'Masculino'), ('female', 'Femenino'), ('other', 'Otro')], max_length=10, verbose_name='Género')),
                ('birth_day', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('is_student', models.BooleanField(default=True, verbose_name='Es estudiante?')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='Es facilitador?')),
                ('is_organizational', models.BooleanField(default=False, verbose_name='Es usuario organizacional?')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Es administrador?')),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, verbose_name='Datos extra')),
                ('avatar', models.ForeignKey(limit_choices_to={'type': 'avatar'}, on_delete=django.db.models.deletion.CASCADE, to='core.Resource', verbose_name='Avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationalProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.Organization', verbose_name='Organización')),
                ('user', models.OneToOneField(limit_choices_to={'is_organizational': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Perfil de usuario organizacional',
                'verbose_name_plural': 'Perfiles de usuarios organizacionales',
                'db_table': 'organizational_profile',
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.OneToOneField(limit_choices_to={'is_student': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Estudiante')),
            ],
            options={
                'verbose_name': 'Perfil de estudiante',
                'verbose_name_plural': 'Perfiles de estudiantes',
                'db_table': 'student_profile',
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher', models.OneToOneField(limit_choices_to={'is_teacher': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Facilitador')),
            ],
            options={
                'verbose_name': 'Perfil de facilitador',
                'verbose_name_plural': 'Perfiles de facilitadores',
                'db_table': 'teacher_profile',
            },
        ),
        migrations.CreateModel(
            name='UserAcademicDegree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('undergraduate', 'Pregrado'), ('postgraduate', 'Postgrado'), ('doctorate', 'Doctorado')], max_length=30, verbose_name='Grado')),
                ('achieved_title', models.CharField(max_length=300, verbose_name='Título obtenido')),
                ('study_center', models.CharField(max_length=300, verbose_name='Centro de estudios')),
                ('started_at', models.DateField(verbose_name='Fecha de inicio')),
                ('finished_at', models.DateField(verbose_name='Fecha de finalización')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Grado académico',
                'verbose_name_plural': 'Grados académicos',
                'db_table': 'user_academic_degree',
            },
        ),
        migrations.CreateModel(
            name='UserExternalTraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('training', 'Capacitación'), ('diplomat', 'Diplomado'), ('course', 'Curso'), ('workshop', 'Taller'), ('seminar', 'Seminario'), ('module', 'Módulo')], max_length=30, verbose_name='Tipo')),
                ('name', models.CharField(max_length=150, verbose_name='Nombre')),
                ('description', models.CharField(max_length=300, verbose_name='Descripción')),
                ('location', models.CharField(max_length=300, verbose_name='Lugar')),
                ('started_at', models.DateField(verbose_name='Fecha de inicio')),
                ('finished_at', models.DateField(verbose_name='Fecha de finalización')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Capacitación Externa',
                'verbose_name_plural': 'Capacitaciones Externas',
                'db_table': 'user_external_trainings',
            },
        ),
    ]
